# unprivileged user, so an attacker cannot do much if the container is compromised:
user nginx;

# We can tune the number of worker processes, connections and configure logging

worker_processes 1;

error_log /var/log/nginx/error.log warn;

pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

# In the “http” block, we define the mime types, and do some basic default logging format and access log configuration

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main ‘$remote_addr — $remote_user [$time_local] “$request” ‘
                  ‘$status $body_bytes_sent “$http_referer” ‘
                  ‘“$http_user_agent” “$http_x_forwarded_for”’;
  access_log /var/log/nginx/access.log main;

  # Server block is where the important stuff is. We configure a port to listen on.

  server {
    listen 81;

    # It’s always important for our server to have some kind of health probe. 
    # This helps container orchestrators like Kubernetes and Docker swarm to make 
    # scheduling decisions based on the health of our NGINX server. Also, if you 
    # have loadbalancers in front of this NGINX server, it may have health probe 
    # features you can take advantage of if you have a health /status endpoint.

    location = /status {
      access_log off;
      default_type text/plain;
      add_header Content-Type text/plain;
      return 200 "200 OK";
    }

    # Next stop, is the location block. We define all traffic / that hits our server, 
    # to receive an HTML file called index.html This is our home page

    location / {
      gzip off;
      root /usr/share/nginx/html/;
      index app/index.html;
    }

    # We also specify location ~* \.(js|jpg|png|css)$ to tell NGINX to serve 
    # requests for static resources such as JavaScript, Style sheets and images.

    location ~* \.(js|jpg|png|css)$ {
      root /usr/share/nginx/html/app/;
    }

    # sendfile is a configuration to optimize file sending.

    sendfile on;
    keepalive_timeout 65;
  }
}

# DOCKER COMMANDS TO RUN THE SERVER 
  # docker build . -t our-server
  # docker run -it --rm -p 8080:80 our-server
